==============================================================================
This document describes data and source code used as input for the following 
publication:

VASP-E: Specificity Annotation with a Volumetric Analysis of
Electrostatic Isopotentials

by Brian Y. Chen, 
Dept. Computer Science and Engineering, Lehigh University

Please direct any questions to <chen@cse.lehigh.edu>
==============================================================================

License:

The source code provided here is free software: you can redistribute it and/or 
modify it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at your 
option) any later version.

The source code provided is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

A copy of the GNU General Public License is available in each software 
directory described below.  If you have not received this license, see 
<http://www.gnu.org/licenses/>.  


Compilation:

The software below are provided in two folders: ./surfProcessing/ and ./vasp/
To compile the code, change your working directory to one of these folders 
and type "make".  The executable binary will be generated in the "debug" folder.
Object files are generated in the "object" folder.  Source code is in the
"source" folder.


File Format:

In addition to PDB file formats, the software provided also operates on closed
surfaces of triangles described by .SURF files.  The .SURF file format is very
simple, and a concise description of the format is provided in here:

SURFformat.txt



Capabilities of surfProcessing:

This program provides three useful utilities used in the paper.  These utilites
are accessed with commandline switches when running the executable, and they 
will be listed and described if you type

./surfProcessing -?

Simply enter filenames for input and output as described with the appropriate
switch that is described when you run surfProcessing with the -? switch.

-surfProbeGen [PDBinput] [SURFoutput] [Radius] [Resolution]

The -surfProbeGen switch generates SURF files that describe the union of spheres 
centered on atoms provided in a pdbfile.  This is useful for generating spheres
around atoms in a bound ligand, for the analysis of ligand binding cavities, or 
interface atoms, for the analysis of protein-protein interfaces.

A sphere will be generated for every atom described in the pdb file [PDBinput].
A surface describing the union of all spheres will be generated in the .SURF 
file format, in a file named [SURFoutput].  Every sphere will be [Radius] 
angstroms in radius.  The resolution of the output surface should be specified
with a decimal number for [Resolution].  We recommend .5 as a computationally
reasonable value.  This means that triangles generated to describe the surface
will fit within cubes of side-length .5 angstroms.


-surfPotentialContour [pdbFile] [INSIGHTgrid] [SURFoutput] [contourThreshold] [+/-] [resolution]

The -surfPotentialContour switch generates SURF files that describe an 
electrostatic isopotential.  It accepts, as input, a [pdbFile] and a DelPhi/
INSIGHT grid file [INSIGHTgrid], which should have been generated by Delphi.
The output surface is generated in a file in the .SURF format, named
[SURFoutput].  The isopotential will be generated at [contourthreshold], a
positive or negative decimal value that corresponds to electrostatic potentials
in kT/e.  

The [+/-] field must contain only one of two characters: either "+"
or "-".  Using "+" indicates that the interior of the isopotential should 
contain the positive side of the isopotential.  "-" causes the isopotential to
contain the negative side of the isopotential.  In this paper we only use "+"
for positive isopotentials, and "-" for negative isopotential thresholds, 
because opposite signs generate isopotentials of infinite size, which do not
lend themselves to volume measurement.

Finally the [resolution] field is a positive decimal number that describes the
geometric complexity of the output isopotential.  We recommend .5 angstroms
as a reasonable and efficient threshold for this value.

Isopotentials generated with negative thresholds will be colored red.  Those
generated with positive thresholds will be colored blue.


-surveyVolume [surfFile]

SurveyVolume uses the Surveyor's method, described in "VASP: A Volumetric 
Analysis of Surface Properties Yields Insights into Protein-Ligand Binding 
Specificity", to estimate the volume within a .SURF file called [surfFile].
Output is sent to STDOUT.




Unit Tests:

The structure of Atlantic Salmon Trypsin (pdb: 1a0j) is included with hydrogens
in the debug folder, along with a DelPhi grid file.  Using the following
command, you should be able to generate an isopotential for 1a0j:

-surfPotentialContour 1a0j.pdb 1a0j.grd 1a0j-10-test.SURF -10 - .5;

A surface has been provided for comparison (10a0j-10.SURF).  You can visualize 
this surface with surfView, which is included in this release.


Using the following command, you can use test1.pdb and test2.pdb to generate
spheres of radius 3 that are identical to the provided surfaces test1.SURF
and test2.SURF.  This demonstrates how you can generate unions of spheres based 
on the coordinates of atoms in a pdb file:

-surfProbeGen test1.pdb test1-test.SURF 3.0 .5


Finally, you can measure the volume inside any of these surfaces.  To test
the compiled software, the following command should yield a value about 
2-3 cubic angstroms under 113.0973, the theortical volume of a sphere of 
radius 3.

-surveyVolume ./test1.SURF;


